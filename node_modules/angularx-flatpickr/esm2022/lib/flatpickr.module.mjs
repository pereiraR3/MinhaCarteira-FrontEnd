import { NgModule, InjectionToken, } from '@angular/core';
import { FlatpickrDirective } from './flatpickr.directive';
import { FlatpickrDefaults, } from './flatpickr-defaults.service';
import * as i0 from "@angular/core";
export const USER_DEFAULTS = new InjectionToken('flatpickr defaults');
export function provideFlatpickrDefaults(userDefaults = {}) {
    return [
        {
            provide: USER_DEFAULTS,
            useValue: userDefaults,
        },
        {
            provide: FlatpickrDefaults,
            useFactory() {
                const defaults = new FlatpickrDefaults();
                Object.assign(defaults, userDefaults);
                return defaults;
            },
            deps: [USER_DEFAULTS],
        },
    ];
}
/**
 * @deprecated Will be removed in the next major version. Please use the standalone `FlatpickrDirective` and `provideFlatpickrDefaults()` instead.
 */
export class FlatpickrModule {
    static forRoot(userDefaults = {}) {
        return {
            ngModule: FlatpickrModule,
            providers: provideFlatpickrDefaults(userDefaults),
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: FlatpickrModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.12", ngImport: i0, type: FlatpickrModule, imports: [FlatpickrDirective], exports: [FlatpickrDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: FlatpickrModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: FlatpickrModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [FlatpickrDirective],
                    exports: [FlatpickrDirective],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdHBpY2tyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXJ4LWZsYXRwaWNrci9zcmMvbGliL2ZsYXRwaWNrci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFFBQVEsRUFFUixjQUFjLEdBRWYsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUNMLGlCQUFpQixHQUVsQixNQUFNLDhCQUE4QixDQUFDOztBQUV0QyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsSUFBSSxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUV0RSxNQUFNLFVBQVUsd0JBQXdCLENBQ3RDLGVBQTJDLEVBQUU7SUFFN0MsT0FBTztRQUNMO1lBQ0UsT0FBTyxFQUFFLGFBQWE7WUFDdEIsUUFBUSxFQUFFLFlBQVk7U0FDdkI7UUFDRDtZQUNFLE9BQU8sRUFBRSxpQkFBaUI7WUFDMUIsVUFBVTtnQkFDUixNQUFNLFFBQVEsR0FBc0IsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO2dCQUM1RCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDdEMsT0FBTyxRQUFRLENBQUM7WUFDbEIsQ0FBQztZQUNELElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQztTQUN0QjtLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQ7O0dBRUc7QUFLSCxNQUFNLE9BQU8sZUFBZTtJQUMxQixNQUFNLENBQUMsT0FBTyxDQUNaLGVBQTJDLEVBQUU7UUFFN0MsT0FBTztZQUNMLFFBQVEsRUFBRSxlQUFlO1lBQ3pCLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQyxZQUFZLENBQUM7U0FDbEQsQ0FBQztJQUNKLENBQUM7K0dBUlUsZUFBZTtnSEFBZixlQUFlLFlBSGhCLGtCQUFrQixhQUNsQixrQkFBa0I7Z0hBRWpCLGVBQWU7OzRGQUFmLGVBQWU7a0JBSjNCLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUMsa0JBQWtCLENBQUM7b0JBQzdCLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO2lCQUM5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE5nTW9kdWxlLFxuICBNb2R1bGVXaXRoUHJvdmlkZXJzLFxuICBJbmplY3Rpb25Ub2tlbixcbiAgUHJvdmlkZXIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmxhdHBpY2tyRGlyZWN0aXZlIH0gZnJvbSAnLi9mbGF0cGlja3IuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gIEZsYXRwaWNrckRlZmF1bHRzLFxuICBGbGF0cGlja3JEZWZhdWx0c0ludGVyZmFjZSxcbn0gZnJvbSAnLi9mbGF0cGlja3ItZGVmYXVsdHMuc2VydmljZSc7XG5cbmV4cG9ydCBjb25zdCBVU0VSX0RFRkFVTFRTID0gbmV3IEluamVjdGlvblRva2VuKCdmbGF0cGlja3IgZGVmYXVsdHMnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVGbGF0cGlja3JEZWZhdWx0cyhcbiAgdXNlckRlZmF1bHRzOiBGbGF0cGlja3JEZWZhdWx0c0ludGVyZmFjZSA9IHt9LFxuKTogUHJvdmlkZXJbXSB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogVVNFUl9ERUZBVUxUUyxcbiAgICAgIHVzZVZhbHVlOiB1c2VyRGVmYXVsdHMsXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBGbGF0cGlja3JEZWZhdWx0cyxcbiAgICAgIHVzZUZhY3RvcnkoKSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRzOiBGbGF0cGlja3JEZWZhdWx0cyA9IG5ldyBGbGF0cGlja3JEZWZhdWx0cygpO1xuICAgICAgICBPYmplY3QuYXNzaWduKGRlZmF1bHRzLCB1c2VyRGVmYXVsdHMpO1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgICB9LFxuICAgICAgZGVwczogW1VTRVJfREVGQVVMVFNdLFxuICAgIH0sXG4gIF07XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uIFBsZWFzZSB1c2UgdGhlIHN0YW5kYWxvbmUgYEZsYXRwaWNrckRpcmVjdGl2ZWAgYW5kIGBwcm92aWRlRmxhdHBpY2tyRGVmYXVsdHMoKWAgaW5zdGVhZC5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0ZsYXRwaWNrckRpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtGbGF0cGlja3JEaXJlY3RpdmVdLFxufSlcbmV4cG9ydCBjbGFzcyBGbGF0cGlja3JNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChcbiAgICB1c2VyRGVmYXVsdHM6IEZsYXRwaWNrckRlZmF1bHRzSW50ZXJmYWNlID0ge30sXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8RmxhdHBpY2tyTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBGbGF0cGlja3JNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IHByb3ZpZGVGbGF0cGlja3JEZWZhdWx0cyh1c2VyRGVmYXVsdHMpLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==