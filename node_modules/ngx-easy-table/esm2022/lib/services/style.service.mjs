import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/* eslint-disable */
export class StyleService {
    setRowClass(val) {
        const selector = `#table > tbody > tr:nth-child(${val.row})`;
        const row = document.querySelector(selector);
        if (row) {
            row.classList.add(val.className);
        }
    }
    setCellClass(val) {
        const selector = `#table > tbody > tr:nth-child(${val.row}) > td:nth-child(${val.cell})`;
        const cell = document.querySelector(selector);
        if (cell) {
            cell.classList.add(val.className);
        }
    }
    setRowStyle(val) {
        const selector = `#table > tbody > tr:nth-child(${val.row})`;
        const row = document.querySelector(selector);
        if (row) {
            // eslint-disable-next-line @typescript-eslint/dot-notation
            row.style[val.attr] = val.value;
        }
    }
    setCellStyle(val) {
        const selector = `#table > tbody > tr:nth-child(${val.row}) > td:nth-child(${val.cell})`;
        const cell = document.querySelector(selector);
        if (cell) {
            // eslint-disable-next-line @typescript-eslint/dot-notation
            cell.style[val.attr] = val.value;
        }
    }
    pinnedWidth(pinned, column) {
        if (pinned) {
            return 150 * column + 'px';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: StyleService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: StyleService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.11", ngImport: i0, type: StyleService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1lYXN5LXRhYmxlL3NyYy9saWIvc2VydmljZXMvc3R5bGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUczQyxvQkFBb0I7QUFFcEIsTUFBTSxPQUFPLFlBQVk7SUFDaEIsV0FBVyxDQUFDLEdBQWE7UUFDOUIsTUFBTSxRQUFRLEdBQUcsaUNBQWlDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM3RCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBd0IsQ0FBQztRQUNwRSxJQUFJLEdBQUcsRUFBRSxDQUFDO1lBQ1IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25DLENBQUM7SUFDSCxDQUFDO0lBRU0sWUFBWSxDQUFDLEdBQWM7UUFDaEMsTUFBTSxRQUFRLEdBQUcsaUNBQWlDLEdBQUcsQ0FBQyxHQUFHLG9CQUFvQixHQUFHLENBQUMsSUFBSSxHQUFHLENBQUM7UUFDekYsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQXlCLENBQUM7UUFDdEUsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNULElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwQyxDQUFDO0lBQ0gsQ0FBQztJQUVNLFdBQVcsQ0FBQyxHQUFhO1FBQzlCLE1BQU0sUUFBUSxHQUFHLGlDQUFpQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDN0QsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQXdCLENBQUM7UUFDcEUsSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNSLDJEQUEyRDtZQUMzRCxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ2xDLENBQUM7SUFDSCxDQUFDO0lBRU0sWUFBWSxDQUFDLEdBQWM7UUFDaEMsTUFBTSxRQUFRLEdBQUcsaUNBQWlDLEdBQUcsQ0FBQyxHQUFHLG9CQUFvQixHQUFHLENBQUMsSUFBSSxHQUFHLENBQUM7UUFDekYsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQXlCLENBQUM7UUFDdEUsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNULDJEQUEyRDtZQUMzRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ25DLENBQUM7SUFDSCxDQUFDO0lBRU0sV0FBVyxDQUFDLE1BQTJCLEVBQUUsTUFBYztRQUM1RCxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQ1gsT0FBTyxHQUFHLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQztRQUM3QixDQUFDO0lBQ0gsQ0FBQzsrR0F2Q1UsWUFBWTttSEFBWixZQUFZOzs0RkFBWixZQUFZO2tCQUR4QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2VsbENsYXNzLCBDZWxsU3R5bGUsIFJvd0NsYXNzLCBSb3dTdHlsZSB9IGZyb20gJy4uJztcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdHlsZVNlcnZpY2Uge1xuICBwdWJsaWMgc2V0Um93Q2xhc3ModmFsOiBSb3dDbGFzcyk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYCN0YWJsZSA+IHRib2R5ID4gdHI6bnRoLWNoaWxkKCR7dmFsLnJvd30pYDtcbiAgICBjb25zdCByb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSBhcyBIVE1MVGFibGVSb3dFbGVtZW50O1xuICAgIGlmIChyb3cpIHtcbiAgICAgIHJvdy5jbGFzc0xpc3QuYWRkKHZhbC5jbGFzc05hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzZXRDZWxsQ2xhc3ModmFsOiBDZWxsQ2xhc3MpOiB2b2lkIHtcbiAgICBjb25zdCBzZWxlY3RvciA9IGAjdGFibGUgPiB0Ym9keSA+IHRyOm50aC1jaGlsZCgke3ZhbC5yb3d9KSA+IHRkOm50aC1jaGlsZCgke3ZhbC5jZWxsfSlgO1xuICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSBhcyBIVE1MVGFibGVDZWxsRWxlbWVudDtcbiAgICBpZiAoY2VsbCkge1xuICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKHZhbC5jbGFzc05hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzZXRSb3dTdHlsZSh2YWw6IFJvd1N0eWxlKTogdm9pZCB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgI3RhYmxlID4gdGJvZHkgPiB0cjpudGgtY2hpbGQoJHt2YWwucm93fSlgO1xuICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIGFzIEhUTUxUYWJsZVJvd0VsZW1lbnQ7XG4gICAgaWYgKHJvdykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9kb3Qtbm90YXRpb25cbiAgICAgIHJvdy5zdHlsZVt2YWwuYXR0cl0gPSB2YWwudmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNldENlbGxTdHlsZSh2YWw6IENlbGxTdHlsZSk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYCN0YWJsZSA+IHRib2R5ID4gdHI6bnRoLWNoaWxkKCR7dmFsLnJvd30pID4gdGQ6bnRoLWNoaWxkKCR7dmFsLmNlbGx9KWA7XG4gICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIGFzIEhUTUxUYWJsZUNlbGxFbGVtZW50O1xuICAgIGlmIChjZWxsKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2RvdC1ub3RhdGlvblxuICAgICAgY2VsbC5zdHlsZVt2YWwuYXR0cl0gPSB2YWwudmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHBpbm5lZFdpZHRoKHBpbm5lZDogYm9vbGVhbiB8IHVuZGVmaW5lZCwgY29sdW1uOiBudW1iZXIpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmIChwaW5uZWQpIHtcbiAgICAgIHJldHVybiAxNTAgKiBjb2x1bW4gKyAncHgnO1xuICAgIH1cbiAgfVxufVxuIl19