import { EventEmitter, ElementRef, ComponentRef, OnDestroy } from '@angular/core';
import { PanelFactoryService } from '../services/panel-factory.service';
import { PanelComponent } from '../components/panel/panel.component';
import { ControlValueAccessor } from '@angular/forms';
import { NgxColorsColor } from '../clases/color';
import { ConverterService } from '../services/converter.service';
import * as i0 from "@angular/core";
export declare class NgxColorsTriggerDirective implements ControlValueAccessor, OnDestroy {
    private triggerRef;
    private panelFactory;
    private service;
    color: string;
    colorsAnimation: 'slide-in' | 'popup';
    palette: Array<string> | Array<NgxColorsColor>;
    format: string;
    formats: string[];
    position: 'top' | 'bottom';
    hideTextInput: boolean;
    hideColorPicker: boolean;
    attachTo: string | undefined;
    overlayClassName: string | undefined;
    colorPickerControls: 'default' | 'only-alpha' | 'no-alpha';
    acceptLabel: string;
    cancelLabel: string;
    change: EventEmitter<string>;
    input: EventEmitter<string>;
    slider: EventEmitter<string>;
    close: EventEmitter<string>;
    open: EventEmitter<string>;
    onClick(): void;
    constructor(triggerRef: ElementRef, panelFactory: PanelFactoryService, service: ConverterService);
    panelRef: ComponentRef<PanelComponent>;
    isDisabled: boolean;
    onTouchedCallback: () => void;
    onChangeCallback: (_: any) => void;
    ngOnDestroy(): void;
    openPanel(): void;
    closePanel(): void;
    setDisabledState(isDisabled: boolean): void;
    setColor(color: any, previewColor?: string): void;
    sliderChange(color: any): void;
    get value(): string;
    set value(value: string);
    writeValue(value: any, previewColor?: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxColorsTriggerDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgxColorsTriggerDirective, "[ngx-colors-trigger]", never, { "colorsAnimation": "colorsAnimation"; "palette": "palette"; "format": "format"; "formats": "formats"; "position": "position"; "hideTextInput": "hideTextInput"; "hideColorPicker": "hideColorPicker"; "attachTo": "attachTo"; "overlayClassName": "overlayClassName"; "colorPickerControls": "colorPickerControls"; "acceptLabel": "acceptLabel"; "cancelLabel": "cancelLabel"; }, { "change": "change"; "input": "input"; "slider": "slider"; "close": "close"; "open": "open"; }, never, never, false, never>;
}
