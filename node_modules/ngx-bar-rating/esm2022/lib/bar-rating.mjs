import { Component, Output, signal, computed, forwardRef, numberAttribute, booleanAttribute, input, model, contentChild, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { NgTemplateOutlet } from '@angular/common';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { ActiveRating, FractionRating, InactiveRating } from './custom-rating';
import * as i0 from "@angular/core";
/** This allows support [(ngModel)] and ngControl. */
const RATING_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => BarRating),
    multi: true
};
/** This allows control required validation. */
const RATING_VALUE_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => BarRating),
    multi: true,
};
var BarRatingUnitState;
(function (BarRatingUnitState) {
    BarRatingUnitState["active"] = "active";
    BarRatingUnitState["inactive"] = "inactive";
    BarRatingUnitState["selected"] = "selected";
    BarRatingUnitState["fraction"] = "fraction";
})(BarRatingUnitState || (BarRatingUnitState = {}));
export class BarRating {
    constructor() {
        this.onChange = () => {
        };
        this.onTouched = () => {
        };
        this.UNITS = BarRatingUnitState;
        /** Current rating. Can be a decimal value like 3.14 */
        this.rate = model(5);
        /** Maximal rating that can be given using this widget. */
        this.max = input(5, { transform: numberAttribute });
        /** A flag indicating if rating can be updated. */
        this.readOnly = input(false, {
            transform: booleanAttribute,
            alias: 'readonly'
        });
        /** Set the theme */
        this.theme = input('default');
        /** Show rating title */
        this.showText = input(false, { transform: booleanAttribute });
        /** Replace rate value with a title */
        this.titles = input([]);
        /** A flag indicating if rating is required for form validation. */
        this.required = input(false, { transform: booleanAttribute });
        this.tabIndex = input(0, { transform: numberAttribute });
        this.hoveredIndex = signal(null);
        this.contexts = computed(() => {
            if (this.hoveredIndex()) {
                return Array.from({ length: this.max() }, (c, i) => {
                    if (this.hoveredIndex()) {
                        if (i + 1 <= this.hoveredIndex()) {
                            return BarRatingUnitState.active;
                        }
                        return BarRatingUnitState.inactive;
                    }
                });
            }
            return Array.from({ length: this.max() }, (c, i) => {
                if (i + 1 <= this.rate()) {
                    return BarRatingUnitState.selected;
                }
                if ((i + 1 === Math.round(this.rate()) && this.rate() % 1) >= 0.5) {
                    return BarRatingUnitState.fraction;
                }
                return BarRatingUnitState.inactive;
            });
        });
        this.ratingText = computed(() => {
            const value = this.hoveredIndex() || this.rate();
            return this.titles()[value] || value;
        });
        /**
         * A stream that forwards a bar rating click since clicks are not propagated
         */
        this.barClick = new EventEmitter();
        this.customActiveRating = contentChild(ActiveRating);
        this.customInActiveRating = contentChild(InactiveRating);
        this.customFractionRating = contentChild(FractionRating);
    }
    updateRating(value) {
        this.rate.set(value);
        this.onChange(value);
    }
    /**
     * This is the initial value set to the component
     */
    writeValue(value) {
        if (value !== null) {
            this.rate.set(value);
        }
    }
    validate(c) {
        return (this.required && !c.value) ? { required: true } : null;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: BarRating, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.0.4", type: BarRating, isStandalone: true, selector: "bar-rating", inputs: { rate: { classPropertyName: "rate", publicName: "rate", isSignal: true, isRequired: false, transformFunction: null }, max: { classPropertyName: "max", publicName: "max", isSignal: true, isRequired: false, transformFunction: null }, readOnly: { classPropertyName: "readOnly", publicName: "readonly", isSignal: true, isRequired: false, transformFunction: null }, theme: { classPropertyName: "theme", publicName: "theme", isSignal: true, isRequired: false, transformFunction: null }, showText: { classPropertyName: "showText", publicName: "showText", isSignal: true, isRequired: false, transformFunction: null }, titles: { classPropertyName: "titles", publicName: "titles", isSignal: true, isRequired: false, transformFunction: null }, required: { classPropertyName: "required", publicName: "required", isSignal: true, isRequired: false, transformFunction: null }, tabIndex: { classPropertyName: "tabIndex", publicName: "tabIndex", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { rate: "rateChange", barClick: "barClick" }, providers: [RATING_VALUE_ACCESSOR, RATING_VALUE_VALIDATOR], queries: [{ propertyName: "customActiveRating", first: true, predicate: ActiveRating, descendants: true, isSignal: true }, { propertyName: "customInActiveRating", first: true, predicate: InactiveRating, descendants: true, isSignal: true }, { propertyName: "customFractionRating", first: true, predicate: FractionRating, descendants: true, isSignal: true }], ngImport: i0, template: "<div class=\"br br-{{ customInActiveRating() ? '' : theme() }}\"\r\n     [class.br-readonly]=\"readOnly()\"\r\n     [class.br-disabled]=\"disabled\"\r\n     [attr.tabindex]=\"disabled || readOnly() ? -1 : tabIndex()\"\r\n     (focusout)=\"onTouched()\">\r\n\r\n  <div class=\"br-units\"\r\n       (mouseleave)=\"hoveredIndex.set(0)\">\r\n    @for (unit of contexts(); let i = $index; track i) {\r\n      <div class=\"br-unit\"\r\n           (click)=\"updateRating(i + 1); barClick.emit(i + 1)\"\r\n           (mouseenter)=\"hoveredIndex.set(i + 1)\">\r\n        @switch (unit) {\r\n          @case (UNITS.fraction) {\r\n            <ng-template [ngTemplateOutlet]=\"customFractionRating()?.template || fractionTemplate\"/>\r\n          }\r\n          @case (UNITS.inactive) {\r\n            <ng-template [ngTemplateOutlet]=\"customInActiveRating()?.template || inactiveTemplate\"/>\r\n          }\r\n          @default {\r\n            <ng-template [ngTemplateOutlet]=\"customActiveRating()?.template || activeTemplate\"/>\r\n          }\r\n        }\r\n      </div>\r\n    }\r\n  </div>\r\n\r\n  @if (showText()) {\r\n    <div class=\"br-text\">{{ ratingText() }}</div>\r\n  }\r\n</div>\r\n\r\n<ng-template #fractionTemplate>\r\n  <div class=\"br-unit-inner br-fraction\"></div>\r\n</ng-template>\r\n\r\n<ng-template #activeTemplate>\r\n  <div class=\"br-unit-inner br-active\"></div>\r\n</ng-template>\r\n\r\n<ng-template #inactiveTemplate>\r\n  <div class=\"br-unit-inner br-inactive\"></div>\r\n</ng-template>\r\n", styles: ["*{box-sizing:border-box}:host{--br-font-size: 16px;--br-gap: 0;--br-active-color: #EDB867;--br-inactive-color: #D2D2D2}.br{position:relative}.br-units{display:flex;flex-wrap:nowrap;gap:var(--br-gap)}.br-unit{font-size:var(--br-font-size);cursor:pointer;-webkit-font-smoothing:antialiased;text-rendering:auto}.br-unit-inner{position:relative}.br-readonly .br-unit,.br-disabled .br-unit{cursor:default;pointer-events:none}\n"], dependencies: [{ kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: BarRating, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'bar-rating', providers: [RATING_VALUE_ACCESSOR, RATING_VALUE_VALIDATOR], imports: [NgTemplateOutlet], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"br br-{{ customInActiveRating() ? '' : theme() }}\"\r\n     [class.br-readonly]=\"readOnly()\"\r\n     [class.br-disabled]=\"disabled\"\r\n     [attr.tabindex]=\"disabled || readOnly() ? -1 : tabIndex()\"\r\n     (focusout)=\"onTouched()\">\r\n\r\n  <div class=\"br-units\"\r\n       (mouseleave)=\"hoveredIndex.set(0)\">\r\n    @for (unit of contexts(); let i = $index; track i) {\r\n      <div class=\"br-unit\"\r\n           (click)=\"updateRating(i + 1); barClick.emit(i + 1)\"\r\n           (mouseenter)=\"hoveredIndex.set(i + 1)\">\r\n        @switch (unit) {\r\n          @case (UNITS.fraction) {\r\n            <ng-template [ngTemplateOutlet]=\"customFractionRating()?.template || fractionTemplate\"/>\r\n          }\r\n          @case (UNITS.inactive) {\r\n            <ng-template [ngTemplateOutlet]=\"customInActiveRating()?.template || inactiveTemplate\"/>\r\n          }\r\n          @default {\r\n            <ng-template [ngTemplateOutlet]=\"customActiveRating()?.template || activeTemplate\"/>\r\n          }\r\n        }\r\n      </div>\r\n    }\r\n  </div>\r\n\r\n  @if (showText()) {\r\n    <div class=\"br-text\">{{ ratingText() }}</div>\r\n  }\r\n</div>\r\n\r\n<ng-template #fractionTemplate>\r\n  <div class=\"br-unit-inner br-fraction\"></div>\r\n</ng-template>\r\n\r\n<ng-template #activeTemplate>\r\n  <div class=\"br-unit-inner br-active\"></div>\r\n</ng-template>\r\n\r\n<ng-template #inactiveTemplate>\r\n  <div class=\"br-unit-inner br-inactive\"></div>\r\n</ng-template>\r\n", styles: ["*{box-sizing:border-box}:host{--br-font-size: 16px;--br-gap: 0;--br-active-color: #EDB867;--br-inactive-color: #D2D2D2}.br{position:relative}.br-units{display:flex;flex-wrap:nowrap;gap:var(--br-gap)}.br-unit{font-size:var(--br-font-size);cursor:pointer;-webkit-font-smoothing:antialiased;text-rendering:auto}.br-unit-inner{position:relative}.br-readonly .br-unit,.br-disabled .br-unit{cursor:default;pointer-events:none}\n"] }]
        }], propDecorators: { barClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,