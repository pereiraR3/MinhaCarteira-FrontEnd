import { EventEmitter, ElementRef, OnDestroy, AfterViewInit, NgZone } from '@angular/core';
import { OverlayScrollbars } from 'overlayscrollbars';
import type { PartialOptions, EventListeners } from 'overlayscrollbars';
import * as i0 from "@angular/core";
export declare class OverlayScrollbarsComponent implements OnDestroy, AfterViewInit {
    private ngZone;
    private targetRef;
    /** OverlayScrollbars options. */
    options?: PartialOptions | false | null;
    /** OverlayScrollbars events. */
    events?: EventListeners | false | null;
    /** Whether to defer the initialization to a point in time when the browser is idle. (or to the next frame if `window.requestIdleCallback` is not supported) */
    defer?: boolean | IdleRequestOptions;
    onInitialized: EventEmitter<[instance: OverlayScrollbars]>;
    onUpdated: EventEmitter<[instance: OverlayScrollbars, onUpdatedArgs: import("overlayscrollbars").OnUpdatedEventListenerArgs]>;
    onDestroyed: EventEmitter<[instance: OverlayScrollbars, canceled: boolean]>;
    onScroll: EventEmitter<[instance: OverlayScrollbars, event: Event]>;
    private contentRef?;
    private osDirective?;
    constructor(ngZone: NgZone, targetRef: ElementRef<HTMLElement>);
    osInstance(): OverlayScrollbars | null;
    getElement(): HTMLElement;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    mergeEvents(originalEvents: OverlayScrollbarsComponent['events']): {
        initialized?: ((instance: OverlayScrollbars) => void) | ((instance: OverlayScrollbars) => void)[] | null | undefined;
        updated?: ((instance: OverlayScrollbars, onUpdatedArgs: import("overlayscrollbars").OnUpdatedEventListenerArgs) => void) | ((instance: OverlayScrollbars, onUpdatedArgs: import("overlayscrollbars").OnUpdatedEventListenerArgs) => void)[] | null | undefined;
        destroyed?: ((instance: OverlayScrollbars, canceled: boolean) => void) | ((instance: OverlayScrollbars, canceled: boolean) => void)[] | null | undefined;
        scroll?: ((instance: OverlayScrollbars, event: Event) => void) | ((instance: OverlayScrollbars, event: Event) => void)[] | null | undefined;
    };
    private dispatchEventIfHasObservers;
    static ɵfac: i0.ɵɵFactoryDeclaration<OverlayScrollbarsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<OverlayScrollbarsComponent, "overlay-scrollbars, [overlay-scrollbars]", never, { "options": "options"; "events": "events"; "defer": "defer"; }, { "onInitialized": "osInitialized"; "onUpdated": "osUpdated"; "onDestroyed": "osDestroyed"; "onScroll": "osScroll"; }, never, ["*"]>;
}
