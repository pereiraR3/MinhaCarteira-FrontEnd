/* eslint-disable @typescript-eslint/consistent-type-imports */
import { Directive, Input } from '@angular/core';
import { OverlayScrollbars } from 'overlayscrollbars';
import * as i0 from "@angular/core";
const createDefer = () => {
    /* istanbul ignore next */
    if (typeof window === 'undefined') {
        // mock ssr calls with "noop"
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        const noop = () => { };
        return [noop, noop];
    }
    let idleId;
    let rafId;
    const wnd = window;
    const idleSupported = typeof wnd.requestIdleCallback === 'function';
    const rAF = wnd.requestAnimationFrame;
    const cAF = wnd.cancelAnimationFrame;
    const rIdle = idleSupported ? wnd.requestIdleCallback : rAF;
    const cIdle = idleSupported ? wnd.cancelIdleCallback : cAF;
    const clear = () => {
        cIdle(idleId);
        cAF(rafId);
    };
    return [
        (callback, options) => {
            clear();
            idleId = rIdle(idleSupported
                ? () => {
                    clear();
                    // inside idle its best practice to use rAF to change DOM for best performance
                    rafId = rAF(callback);
                }
                : callback, 
            // @ts-ignore
            typeof options === 'object' ? options : { timeout: 2233 });
        },
        clear,
    ];
};
export class OverlayScrollbarsDirective {
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.instanceRef = null;
        const [requestDefer, cancelDefer] = createDefer();
        this.requestDefer = requestDefer;
        this.cancelDefer = cancelDefer;
    }
    osInitialize(target) {
        this.ngZone.runOutsideAngular(() => {
            const init = () => {
                this.instanceRef = OverlayScrollbars(target, this.options || {}, 
                /* istanbul ignore next */
                this.events || {});
            };
            if (this.defer) {
                this.requestDefer(init, this.defer);
            }
            else {
                init();
            }
        });
    }
    osInstance() {
        return this.instanceRef;
    }
    ngOnChanges(changes) {
        const optionsChange = changes.options;
        const eventsChange = changes.events;
        if (optionsChange) {
            const curr = optionsChange.currentValue;
            this.options = curr;
            if (OverlayScrollbars.valid(this.instanceRef)) {
                this.instanceRef.options(curr || {}, true);
            }
        }
        /* istanbul ignore else */
        if (eventsChange) {
            const curr = eventsChange.currentValue;
            this.events = curr;
            if (OverlayScrollbars.valid(this.instanceRef)) {
                this.instanceRef.on(
                /* istanbul ignore next */
                curr || {}, true);
            }
        }
    }
    ngOnDestroy() {
        this.cancelDefer();
    }
}
OverlayScrollbarsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: OverlayScrollbarsDirective, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
OverlayScrollbarsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.4.0", type: OverlayScrollbarsDirective, selector: "[overlayScrollbars]", inputs: { options: "options", events: "events", defer: "defer" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: OverlayScrollbarsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[overlayScrollbars]', // https://angular.io/guide/styleguide#directive-selectors
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { options: [{
                type: Input,
                args: ['options']
            }], events: [{
                type: Input,
                args: ['events']
            }], defer: [{
                type: Input,
                args: ['defer']
            }] } });
//# sourceMappingURL=data:application/json;base64,