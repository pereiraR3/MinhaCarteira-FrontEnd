/* eslint-disable @typescript-eslint/consistent-type-imports */
import { Component, Input, Output, EventEmitter, ViewChild, } from '@angular/core';
import { OverlayScrollbarsDirective } from './overlayscrollbars.directive';
import * as i0 from "@angular/core";
import * as i1 from "./overlayscrollbars.directive";
const mergeEventListeners = (emits, events) => Object.keys(emits).reduce((obj, name) => {
    const emitListener = emits[name];
    const eventListener = events[name];
    /* istanbul ignore next */
    obj[name] = [
        emitListener,
        ...(Array.isArray(eventListener) ? eventListener : [eventListener]).filter(Boolean),
    ];
    return obj;
}, {});
export class OverlayScrollbarsComponent {
    constructor(ngZone, targetRef) {
        this.ngZone = ngZone;
        this.targetRef = targetRef;
        this.onInitialized = new EventEmitter();
        this.onUpdated = new EventEmitter();
        this.onDestroyed = new EventEmitter();
        this.onScroll = new EventEmitter();
    }
    osInstance() {
        return this.osDirective.osInstance();
    }
    getElement() {
        return this.targetRef.nativeElement;
    }
    ngAfterViewInit() {
        const targetElm = this.getElement();
        const contentElm = this.contentRef.nativeElement;
        /* istanbul ignore else */
        if (targetElm && contentElm) {
            this.osDirective.osInitialize({
                target: targetElm,
                elements: {
                    viewport: contentElm,
                    content: contentElm,
                },
            });
        }
    }
    ngOnDestroy() {
        this.osDirective?.osInstance()?.destroy();
    }
    mergeEvents(originalEvents) {
        return mergeEventListeners({
            initialized: (...args) => this.dispatchEventIfHasObservers(this.onInitialized, args),
            updated: (...args) => this.dispatchEventIfHasObservers(this.onUpdated, args),
            destroyed: (...args) => this.dispatchEventIfHasObservers(this.onDestroyed, args),
            scroll: (...args) => this.dispatchEventIfHasObservers(this.onScroll, args),
        }, originalEvents || {});
    }
    dispatchEventIfHasObservers(eventEmitter, args) {
        // `observed` is available since RxJS@7.2 because `observers` is being deprecated.
        if (eventEmitter.observed || eventEmitter.observers.length > 0) {
            // This is required to re-enter the Angular zone to call the event handler in the Angular
            // zone too. This will not re-enter the Angular zone if emitter doesn't have any observers,
            // for instance, it's being listened: `<overlay-scrollbars (osInitialized)="..."`.
            // Events are dispatched outside of the Angular zone because instance is created in the
            // `<root>` zone, see `OverlayScrollbarsDirective#osInitialize`.
            this.ngZone.run(() => eventEmitter.emit(args));
        }
    }
}
OverlayScrollbarsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: OverlayScrollbarsComponent, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
OverlayScrollbarsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.4.0", type: OverlayScrollbarsComponent, selector: "overlay-scrollbars, [overlay-scrollbars]", inputs: { options: "options", events: "events", defer: "defer" }, outputs: { onInitialized: "osInitialized", onUpdated: "osUpdated", onDestroyed: "osDestroyed", onScroll: "osScroll" }, host: { attributes: { "data-overlayscrollbars-initialize": "" } }, viewQueries: [{ propertyName: "contentRef", first: true, predicate: ["content"], descendants: true }, { propertyName: "osDirective", first: true, predicate: ["content"], descendants: true, read: OverlayScrollbarsDirective }], ngImport: i0, template: `
    <div
      overlayScrollbars
      data-overlayscrollbars-contents=""
      [options]="options"
      [events]="mergeEvents(events)"
      [defer]="defer"
      #content
    >
      <ng-content></ng-content>
    </div>
  `, isInline: true, directives: [{ type: i1.OverlayScrollbarsDirective, selector: "[overlayScrollbars]", inputs: ["options", "events", "defer"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: OverlayScrollbarsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'overlay-scrollbars, [overlay-scrollbars]',
                    host: { 'data-overlayscrollbars-initialize': '' },
                    template: `
    <div
      overlayScrollbars
      data-overlayscrollbars-contents=""
      [options]="options"
      [events]="mergeEvents(events)"
      [defer]="defer"
      #content
    >
      <ng-content></ng-content>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }]; }, propDecorators: { options: [{
                type: Input,
                args: ['options']
            }], events: [{
                type: Input,
                args: ['events']
            }], defer: [{
                type: Input,
                args: ['defer']
            }], onInitialized: [{
                type: Output,
                args: ['osInitialized']
            }], onUpdated: [{
                type: Output,
                args: ['osUpdated']
            }], onDestroyed: [{
                type: Output,
                args: ['osDestroyed']
            }], onScroll: [{
                type: Output,
                args: ['osScroll']
            }], contentRef: [{
                type: ViewChild,
                args: ['content']
            }], osDirective: [{
                type: ViewChild,
                args: ['content', { read: OverlayScrollbarsDirective }]
            }] } });
//# sourceMappingURL=data:application/json;base64,